syntax = "proto3";
option go_package = "github.com/jamespfennell/transiter/api";

import "google/api/annotations.proto";

service TransiterAdmin {
    rpc GetSystemConfig (GetSystemConfigRequest) returns (SystemConfig) {
        option (google.api.http) = {
                get: "/admin/systems/{system_id}"
            };
      }

      rpc InstallOrUpdateSystem (InstallOrUpdateSystemRequest) returns (InstallOrUpdateSystemReply) {
        option (google.api.http) = {
                put: "/admin/systems/{system_id}"
                body: "*"
            };
      }

      rpc DeleteSystem (DeleteSystemRequest) returns (DeleteSystemReply) {
        option (google.api.http) = {
                delete: "/admin/systems/{system_id}"
            };
      }

      rpc UpdateFeed(UpdateFeedRequest) returns (UpdateFeedReply) {
        option (google.api.http) = {
                post: "/admin/systems/{system_id}/feeds/{feed_id}"
            };
      }

      rpc GetSchedulerStatus(GetSchedulerStatusRequest) returns (GetSchedulerStatusReply) {
        option (google.api.http) = {
                get: "/admin/scheduler"
            };
      }

      rpc ResetScheduler(ResetSchedulerRequest) returns (ResetSchedulerReply) {
        option (google.api.http) = {
                post: "/admin/scheduler"
            };
      }
}

message GetSystemConfigRequest {
    string system_id = 1;
}

message InstallOrUpdateSystemRequest {
    string system_id = 1;

    oneof config {
        SystemConfig system_config = 2;
        YamlConfig yaml_config = 3;
    }

    // If true, do nothing if the system already exist.
    bool install_only = 4;

    // If false (the default), the system configuration is validated before the request finishes
    // but databse updates are performed asynchronously. The status of the operation can 
    // be polled using GetSystem and inspecting the status field.
    //
    // If true, the operation is perfomed synchronously in the request and in a single database transaction.
    // In this case, if the install or update fails there will no database artifacts. The catch
    // is that installs can take a long time and the request may be cancelled before it completes
    // e.g. by an intermediate proxy.
    bool synchronous = 5;
}

message YamlConfig {
    oneof source {
        string url = 1;
        string content = 2;
    }
    bool is_template = 3;
    map<string, string> template_args = 4;
}

message InstallOrUpdateSystemReply {
    string system_id = 1;
    SystemConfig system_config = 2;
}

message DeleteSystemRequest {
    string system_id = 1;
}

message DeleteSystemReply {
}

message SystemConfig {
    string name = 1;
    repeated FeedConfig feeds = 2;
    repeated ServiceMapConfig service_maps = 3;
}

message FeedConfig {
    string id = 1;

    bool required_for_install = 8;

    bool periodic_update_enabled = 6;
    optional int64 periodic_update_period = 7;
    
    string url = 2;
    optional int64 http_timeout = 22;
    map<string, string> http_headers = 23;

    message GtfsStaticParser{
        enum TransfersStrategy {
            DEFAULT = 0;
            GROUP_STATIONS = 1;
        }
        TransfersStrategy transfers_strategy = 1;

        message TransfersExceptions {
            string stop_id_1 = 1;
            string stop_id_2 = 2;
            TransfersStrategy strategy = 3;
        }
        repeated TransfersExceptions transfers_exceptions = 2;
    }

    message GtfsRealtimeParser {
        optional GtfsRealtimeExtension extension = 1;
    }

    message NyctSubwayCsvParser{}

    oneof parser {
        GtfsStaticParser gtfs_static_parser = 3;
        GtfsRealtimeParser gtfs_realtime_parser = 4;
        NyctSubwayCsvParser nyct_subway_csv_parser = 5;
    }

}

enum GtfsRealtimeExtension {
    UNSPECIFIED = 0;
    US_NY_SUBWAY_TRIPS = 1;
    US_NY_SUBWAY_ALERTS = 2;
}

message ServiceMapConfig {
    string id = 1;

    message Static {
        optional int64 starts_earlier_than = 1;
        optional int64 starts_later_than = 2;
        optional int64 ends_earlier_than = 3;
        optional int64 ends_later_than = 4;
        repeated string days = 5;
    }

    message Realtime {}

    oneof source {
        Static static_source = 2;
        Realtime realtime_source = 3;
    }

    double threshold = 4;

    bool default_for_routes_at_stop = 5;
    bool default_for_stops_in_route = 6;
}


message UpdateFeedRequest {
    string system_id = 1;
    string feed_id = 2;
}

message UpdateFeedReply {}

message GetSchedulerStatusRequest {}

message GetSchedulerStatusReply {
    message Feed {
        string system_id = 1;
        string feed_id = 2;
        int64 period = 3;
        int64 last_successful_update = 4;
        int64 last_finished_update = 5;
        bool currently_running = 6;
    }
    repeated Feed feeds = 1;
}

message ResetSchedulerRequest {}

message ResetSchedulerReply {}
