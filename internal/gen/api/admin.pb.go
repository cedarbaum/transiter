// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.18.1
// source: api/admin.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GtfsRealtimeExtension int32

const (
	GtfsRealtimeExtension_UNSPECIFIED         GtfsRealtimeExtension = 0
	GtfsRealtimeExtension_US_NY_SUBWAY_TRIPS  GtfsRealtimeExtension = 1
	GtfsRealtimeExtension_US_NY_SUBWAY_ALERTS GtfsRealtimeExtension = 2
)

// Enum value maps for GtfsRealtimeExtension.
var (
	GtfsRealtimeExtension_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "US_NY_SUBWAY_TRIPS",
		2: "US_NY_SUBWAY_ALERTS",
	}
	GtfsRealtimeExtension_value = map[string]int32{
		"UNSPECIFIED":         0,
		"US_NY_SUBWAY_TRIPS":  1,
		"US_NY_SUBWAY_ALERTS": 2,
	}
)

func (x GtfsRealtimeExtension) Enum() *GtfsRealtimeExtension {
	p := new(GtfsRealtimeExtension)
	*p = x
	return p
}

func (x GtfsRealtimeExtension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GtfsRealtimeExtension) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[0].Descriptor()
}

func (GtfsRealtimeExtension) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[0]
}

func (x GtfsRealtimeExtension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GtfsRealtimeExtension.Descriptor instead.
func (GtfsRealtimeExtension) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{0}
}

type FeedConfig_GtfsStaticParser_TransfersStrategy int32

const (
	FeedConfig_GtfsStaticParser_DEFAULT        FeedConfig_GtfsStaticParser_TransfersStrategy = 0
	FeedConfig_GtfsStaticParser_GROUP_STATIONS FeedConfig_GtfsStaticParser_TransfersStrategy = 1
)

// Enum value maps for FeedConfig_GtfsStaticParser_TransfersStrategy.
var (
	FeedConfig_GtfsStaticParser_TransfersStrategy_name = map[int32]string{
		0: "DEFAULT",
		1: "GROUP_STATIONS",
	}
	FeedConfig_GtfsStaticParser_TransfersStrategy_value = map[string]int32{
		"DEFAULT":        0,
		"GROUP_STATIONS": 1,
	}
)

func (x FeedConfig_GtfsStaticParser_TransfersStrategy) Enum() *FeedConfig_GtfsStaticParser_TransfersStrategy {
	p := new(FeedConfig_GtfsStaticParser_TransfersStrategy)
	*p = x
	return p
}

func (x FeedConfig_GtfsStaticParser_TransfersStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedConfig_GtfsStaticParser_TransfersStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[1].Descriptor()
}

func (FeedConfig_GtfsStaticParser_TransfersStrategy) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[1]
}

func (x FeedConfig_GtfsStaticParser_TransfersStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedConfig_GtfsStaticParser_TransfersStrategy.Descriptor instead.
func (FeedConfig_GtfsStaticParser_TransfersStrategy) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 1, 0}
}

type GetSystemConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
}

func (x *GetSystemConfigRequest) Reset() {
	*x = GetSystemConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemConfigRequest) ProtoMessage() {}

func (x *GetSystemConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSystemConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{0}
}

func (x *GetSystemConfigRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

type InstallOrUpdateSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// Types that are assignable to Config:
	//	*InstallOrUpdateSystemRequest_SystemConfig
	//	*InstallOrUpdateSystemRequest_YamlConfig
	Config isInstallOrUpdateSystemRequest_Config `protobuf_oneof:"config"`
	// If true, do nothing if the system already exist.
	InstallOnly bool `protobuf:"varint,4,opt,name=install_only,json=installOnly,proto3" json:"install_only,omitempty"`
	// If false (the default), the system configuration is validated before the request finishes
	// but databse updates are performed asynchronously. The status of the operation can
	// be polled using GetSystem and inspecting the status field.
	//
	// If true, the operation is perfomed synchronously in the request and in a single database transaction.
	// In this case, if the install or update fails there will no database artifacts. The catch
	// is that installs can take a long time and the request may be cancelled before it completes
	// e.g. by an intermediate proxy.
	Synchronous bool `protobuf:"varint,5,opt,name=synchronous,proto3" json:"synchronous,omitempty"`
}

func (x *InstallOrUpdateSystemRequest) Reset() {
	*x = InstallOrUpdateSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOrUpdateSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOrUpdateSystemRequest) ProtoMessage() {}

func (x *InstallOrUpdateSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOrUpdateSystemRequest.ProtoReflect.Descriptor instead.
func (*InstallOrUpdateSystemRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{1}
}

func (x *InstallOrUpdateSystemRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (m *InstallOrUpdateSystemRequest) GetConfig() isInstallOrUpdateSystemRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetSystemConfig() *SystemConfig {
	if x, ok := x.GetConfig().(*InstallOrUpdateSystemRequest_SystemConfig); ok {
		return x.SystemConfig
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetYamlConfig() *YamlConfig {
	if x, ok := x.GetConfig().(*InstallOrUpdateSystemRequest_YamlConfig); ok {
		return x.YamlConfig
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetInstallOnly() bool {
	if x != nil {
		return x.InstallOnly
	}
	return false
}

func (x *InstallOrUpdateSystemRequest) GetSynchronous() bool {
	if x != nil {
		return x.Synchronous
	}
	return false
}

type isInstallOrUpdateSystemRequest_Config interface {
	isInstallOrUpdateSystemRequest_Config()
}

type InstallOrUpdateSystemRequest_SystemConfig struct {
	SystemConfig *SystemConfig `protobuf:"bytes,2,opt,name=system_config,json=systemConfig,proto3,oneof"`
}

type InstallOrUpdateSystemRequest_YamlConfig struct {
	YamlConfig *YamlConfig `protobuf:"bytes,3,opt,name=yaml_config,json=yamlConfig,proto3,oneof"`
}

func (*InstallOrUpdateSystemRequest_SystemConfig) isInstallOrUpdateSystemRequest_Config() {}

func (*InstallOrUpdateSystemRequest_YamlConfig) isInstallOrUpdateSystemRequest_Config() {}

type YamlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*YamlConfig_Url
	//	*YamlConfig_Content
	Source       isYamlConfig_Source `protobuf_oneof:"source"`
	IsTemplate   bool                `protobuf:"varint,3,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`
	TemplateArgs map[string]string   `protobuf:"bytes,4,rep,name=template_args,json=templateArgs,proto3" json:"template_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *YamlConfig) Reset() {
	*x = YamlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlConfig) ProtoMessage() {}

func (x *YamlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlConfig.ProtoReflect.Descriptor instead.
func (*YamlConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{2}
}

func (m *YamlConfig) GetSource() isYamlConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *YamlConfig) GetUrl() string {
	if x, ok := x.GetSource().(*YamlConfig_Url); ok {
		return x.Url
	}
	return ""
}

func (x *YamlConfig) GetContent() string {
	if x, ok := x.GetSource().(*YamlConfig_Content); ok {
		return x.Content
	}
	return ""
}

func (x *YamlConfig) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *YamlConfig) GetTemplateArgs() map[string]string {
	if x != nil {
		return x.TemplateArgs
	}
	return nil
}

type isYamlConfig_Source interface {
	isYamlConfig_Source()
}

type YamlConfig_Url struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type YamlConfig_Content struct {
	Content string `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*YamlConfig_Url) isYamlConfig_Source() {}

func (*YamlConfig_Content) isYamlConfig_Source() {}

type InstallOrUpdateSystemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId     string        `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	SystemConfig *SystemConfig `protobuf:"bytes,2,opt,name=system_config,json=systemConfig,proto3" json:"system_config,omitempty"`
}

func (x *InstallOrUpdateSystemReply) Reset() {
	*x = InstallOrUpdateSystemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOrUpdateSystemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOrUpdateSystemReply) ProtoMessage() {}

func (x *InstallOrUpdateSystemReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOrUpdateSystemReply.ProtoReflect.Descriptor instead.
func (*InstallOrUpdateSystemReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{3}
}

func (x *InstallOrUpdateSystemReply) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *InstallOrUpdateSystemReply) GetSystemConfig() *SystemConfig {
	if x != nil {
		return x.SystemConfig
	}
	return nil
}

type DeleteSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
}

func (x *DeleteSystemRequest) Reset() {
	*x = DeleteSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemRequest) ProtoMessage() {}

func (x *DeleteSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteSystemRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSystemRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

type DeleteSystemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSystemReply) Reset() {
	*x = DeleteSystemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSystemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemReply) ProtoMessage() {}

func (x *DeleteSystemReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemReply.ProtoReflect.Descriptor instead.
func (*DeleteSystemReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{5}
}

type SystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Feeds       []*FeedConfig       `protobuf:"bytes,2,rep,name=feeds,proto3" json:"feeds,omitempty"`
	ServiceMaps []*ServiceMapConfig `protobuf:"bytes,3,rep,name=service_maps,json=serviceMaps,proto3" json:"service_maps,omitempty"`
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{6}
}

func (x *SystemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemConfig) GetFeeds() []*FeedConfig {
	if x != nil {
		return x.Feeds
	}
	return nil
}

func (x *SystemConfig) GetServiceMaps() []*ServiceMapConfig {
	if x != nil {
		return x.ServiceMaps
	}
	return nil
}

type FeedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequiredForInstall    bool              `protobuf:"varint,8,opt,name=required_for_install,json=requiredForInstall,proto3" json:"required_for_install,omitempty"`
	PeriodicUpdateEnabled bool              `protobuf:"varint,6,opt,name=periodic_update_enabled,json=periodicUpdateEnabled,proto3" json:"periodic_update_enabled,omitempty"`
	PeriodicUpdatePeriod  *int64            `protobuf:"varint,7,opt,name=periodic_update_period,json=periodicUpdatePeriod,proto3,oneof" json:"periodic_update_period,omitempty"`
	Url                   string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HttpTimeout           *int64            `protobuf:"varint,22,opt,name=http_timeout,json=httpTimeout,proto3,oneof" json:"http_timeout,omitempty"`
	HttpHeaders           map[string]string `protobuf:"bytes,23,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Parser:
	//	*FeedConfig_GtfsStaticParser_
	//	*FeedConfig_GtfsRealtimeParser_
	//	*FeedConfig_NyctSubwayCsvParser_
	Parser isFeedConfig_Parser `protobuf_oneof:"parser"`
}

func (x *FeedConfig) Reset() {
	*x = FeedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig) ProtoMessage() {}

func (x *FeedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig.ProtoReflect.Descriptor instead.
func (*FeedConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7}
}

func (x *FeedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeedConfig) GetRequiredForInstall() bool {
	if x != nil {
		return x.RequiredForInstall
	}
	return false
}

func (x *FeedConfig) GetPeriodicUpdateEnabled() bool {
	if x != nil {
		return x.PeriodicUpdateEnabled
	}
	return false
}

func (x *FeedConfig) GetPeriodicUpdatePeriod() int64 {
	if x != nil && x.PeriodicUpdatePeriod != nil {
		return *x.PeriodicUpdatePeriod
	}
	return 0
}

func (x *FeedConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FeedConfig) GetHttpTimeout() int64 {
	if x != nil && x.HttpTimeout != nil {
		return *x.HttpTimeout
	}
	return 0
}

func (x *FeedConfig) GetHttpHeaders() map[string]string {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (m *FeedConfig) GetParser() isFeedConfig_Parser {
	if m != nil {
		return m.Parser
	}
	return nil
}

func (x *FeedConfig) GetGtfsStaticParser() *FeedConfig_GtfsStaticParser {
	if x, ok := x.GetParser().(*FeedConfig_GtfsStaticParser_); ok {
		return x.GtfsStaticParser
	}
	return nil
}

func (x *FeedConfig) GetGtfsRealtimeParser() *FeedConfig_GtfsRealtimeParser {
	if x, ok := x.GetParser().(*FeedConfig_GtfsRealtimeParser_); ok {
		return x.GtfsRealtimeParser
	}
	return nil
}

func (x *FeedConfig) GetNyctSubwayCsvParser() *FeedConfig_NyctSubwayCsvParser {
	if x, ok := x.GetParser().(*FeedConfig_NyctSubwayCsvParser_); ok {
		return x.NyctSubwayCsvParser
	}
	return nil
}

type isFeedConfig_Parser interface {
	isFeedConfig_Parser()
}

type FeedConfig_GtfsStaticParser_ struct {
	GtfsStaticParser *FeedConfig_GtfsStaticParser `protobuf:"bytes,3,opt,name=gtfs_static_parser,json=gtfsStaticParser,proto3,oneof"`
}

type FeedConfig_GtfsRealtimeParser_ struct {
	GtfsRealtimeParser *FeedConfig_GtfsRealtimeParser `protobuf:"bytes,4,opt,name=gtfs_realtime_parser,json=gtfsRealtimeParser,proto3,oneof"`
}

type FeedConfig_NyctSubwayCsvParser_ struct {
	NyctSubwayCsvParser *FeedConfig_NyctSubwayCsvParser `protobuf:"bytes,5,opt,name=nyct_subway_csv_parser,json=nyctSubwayCsvParser,proto3,oneof"`
}

func (*FeedConfig_GtfsStaticParser_) isFeedConfig_Parser() {}

func (*FeedConfig_GtfsRealtimeParser_) isFeedConfig_Parser() {}

func (*FeedConfig_NyctSubwayCsvParser_) isFeedConfig_Parser() {}

type ServiceMapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Source:
	//	*ServiceMapConfig_StaticSource
	//	*ServiceMapConfig_RealtimeSource
	Source                 isServiceMapConfig_Source `protobuf_oneof:"source"`
	Threshold              float64                   `protobuf:"fixed64,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	DefaultForRoutesAtStop bool                      `protobuf:"varint,5,opt,name=default_for_routes_at_stop,json=defaultForRoutesAtStop,proto3" json:"default_for_routes_at_stop,omitempty"`
	DefaultForStopsInRoute bool                      `protobuf:"varint,6,opt,name=default_for_stops_in_route,json=defaultForStopsInRoute,proto3" json:"default_for_stops_in_route,omitempty"`
}

func (x *ServiceMapConfig) Reset() {
	*x = ServiceMapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapConfig) ProtoMessage() {}

func (x *ServiceMapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapConfig.ProtoReflect.Descriptor instead.
func (*ServiceMapConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceMapConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ServiceMapConfig) GetSource() isServiceMapConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ServiceMapConfig) GetStaticSource() *ServiceMapConfig_Static {
	if x, ok := x.GetSource().(*ServiceMapConfig_StaticSource); ok {
		return x.StaticSource
	}
	return nil
}

func (x *ServiceMapConfig) GetRealtimeSource() *ServiceMapConfig_Realtime {
	if x, ok := x.GetSource().(*ServiceMapConfig_RealtimeSource); ok {
		return x.RealtimeSource
	}
	return nil
}

func (x *ServiceMapConfig) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ServiceMapConfig) GetDefaultForRoutesAtStop() bool {
	if x != nil {
		return x.DefaultForRoutesAtStop
	}
	return false
}

func (x *ServiceMapConfig) GetDefaultForStopsInRoute() bool {
	if x != nil {
		return x.DefaultForStopsInRoute
	}
	return false
}

type isServiceMapConfig_Source interface {
	isServiceMapConfig_Source()
}

type ServiceMapConfig_StaticSource struct {
	StaticSource *ServiceMapConfig_Static `protobuf:"bytes,2,opt,name=static_source,json=staticSource,proto3,oneof"`
}

type ServiceMapConfig_RealtimeSource struct {
	RealtimeSource *ServiceMapConfig_Realtime `protobuf:"bytes,3,opt,name=realtime_source,json=realtimeSource,proto3,oneof"`
}

func (*ServiceMapConfig_StaticSource) isServiceMapConfig_Source() {}

func (*ServiceMapConfig_RealtimeSource) isServiceMapConfig_Source() {}

type UpdateFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	FeedId   string `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
}

func (x *UpdateFeedRequest) Reset() {
	*x = UpdateFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeedRequest) ProtoMessage() {}

func (x *UpdateFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeedRequest.ProtoReflect.Descriptor instead.
func (*UpdateFeedRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateFeedRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *UpdateFeedRequest) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

type UpdateFeedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFeedReply) Reset() {
	*x = UpdateFeedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeedReply) ProtoMessage() {}

func (x *UpdateFeedReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeedReply.ProtoReflect.Descriptor instead.
func (*UpdateFeedReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{10}
}

type GetSchedulerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSchedulerStatusRequest) Reset() {
	*x = GetSchedulerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusRequest) ProtoMessage() {}

func (x *GetSchedulerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{11}
}

type GetSchedulerStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feeds []*GetSchedulerStatusReply_Feed `protobuf:"bytes,1,rep,name=feeds,proto3" json:"feeds,omitempty"`
}

func (x *GetSchedulerStatusReply) Reset() {
	*x = GetSchedulerStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusReply) ProtoMessage() {}

func (x *GetSchedulerStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusReply.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{12}
}

func (x *GetSchedulerStatusReply) GetFeeds() []*GetSchedulerStatusReply_Feed {
	if x != nil {
		return x.Feeds
	}
	return nil
}

type ResetSchedulerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSchedulerRequest) Reset() {
	*x = ResetSchedulerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSchedulerRequest) ProtoMessage() {}

func (x *ResetSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSchedulerRequest.ProtoReflect.Descriptor instead.
func (*ResetSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{13}
}

type ResetSchedulerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSchedulerReply) Reset() {
	*x = ResetSchedulerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSchedulerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSchedulerReply) ProtoMessage() {}

func (x *ResetSchedulerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSchedulerReply.ProtoReflect.Descriptor instead.
func (*ResetSchedulerReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{14}
}

type FeedConfig_GtfsStaticParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransfersStrategy   FeedConfig_GtfsStaticParser_TransfersStrategy      `protobuf:"varint,1,opt,name=transfers_strategy,json=transfersStrategy,proto3,enum=FeedConfig_GtfsStaticParser_TransfersStrategy" json:"transfers_strategy,omitempty"`
	TransfersExceptions []*FeedConfig_GtfsStaticParser_TransfersExceptions `protobuf:"bytes,2,rep,name=transfers_exceptions,json=transfersExceptions,proto3" json:"transfers_exceptions,omitempty"`
}

func (x *FeedConfig_GtfsStaticParser) Reset() {
	*x = FeedConfig_GtfsStaticParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedConfig_GtfsStaticParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig_GtfsStaticParser) ProtoMessage() {}

func (x *FeedConfig_GtfsStaticParser) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig_GtfsStaticParser.ProtoReflect.Descriptor instead.
func (*FeedConfig_GtfsStaticParser) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 1}
}

func (x *FeedConfig_GtfsStaticParser) GetTransfersStrategy() FeedConfig_GtfsStaticParser_TransfersStrategy {
	if x != nil {
		return x.TransfersStrategy
	}
	return FeedConfig_GtfsStaticParser_DEFAULT
}

func (x *FeedConfig_GtfsStaticParser) GetTransfersExceptions() []*FeedConfig_GtfsStaticParser_TransfersExceptions {
	if x != nil {
		return x.TransfersExceptions
	}
	return nil
}

type FeedConfig_GtfsRealtimeParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extension *GtfsRealtimeExtension `protobuf:"varint,1,opt,name=extension,proto3,enum=GtfsRealtimeExtension,oneof" json:"extension,omitempty"`
}

func (x *FeedConfig_GtfsRealtimeParser) Reset() {
	*x = FeedConfig_GtfsRealtimeParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedConfig_GtfsRealtimeParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig_GtfsRealtimeParser) ProtoMessage() {}

func (x *FeedConfig_GtfsRealtimeParser) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig_GtfsRealtimeParser.ProtoReflect.Descriptor instead.
func (*FeedConfig_GtfsRealtimeParser) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 2}
}

func (x *FeedConfig_GtfsRealtimeParser) GetExtension() GtfsRealtimeExtension {
	if x != nil && x.Extension != nil {
		return *x.Extension
	}
	return GtfsRealtimeExtension_UNSPECIFIED
}

type FeedConfig_NyctSubwayCsvParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FeedConfig_NyctSubwayCsvParser) Reset() {
	*x = FeedConfig_NyctSubwayCsvParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedConfig_NyctSubwayCsvParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig_NyctSubwayCsvParser) ProtoMessage() {}

func (x *FeedConfig_NyctSubwayCsvParser) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig_NyctSubwayCsvParser.ProtoReflect.Descriptor instead.
func (*FeedConfig_NyctSubwayCsvParser) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 3}
}

type FeedConfig_GtfsStaticParser_TransfersExceptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopId_1 string                                        `protobuf:"bytes,1,opt,name=stop_id_1,json=stopId1,proto3" json:"stop_id_1,omitempty"`
	StopId_2 string                                        `protobuf:"bytes,2,opt,name=stop_id_2,json=stopId2,proto3" json:"stop_id_2,omitempty"`
	Strategy FeedConfig_GtfsStaticParser_TransfersStrategy `protobuf:"varint,3,opt,name=strategy,proto3,enum=FeedConfig_GtfsStaticParser_TransfersStrategy" json:"strategy,omitempty"`
}

func (x *FeedConfig_GtfsStaticParser_TransfersExceptions) Reset() {
	*x = FeedConfig_GtfsStaticParser_TransfersExceptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedConfig_GtfsStaticParser_TransfersExceptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig_GtfsStaticParser_TransfersExceptions) ProtoMessage() {}

func (x *FeedConfig_GtfsStaticParser_TransfersExceptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig_GtfsStaticParser_TransfersExceptions.ProtoReflect.Descriptor instead.
func (*FeedConfig_GtfsStaticParser_TransfersExceptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 1, 0}
}

func (x *FeedConfig_GtfsStaticParser_TransfersExceptions) GetStopId_1() string {
	if x != nil {
		return x.StopId_1
	}
	return ""
}

func (x *FeedConfig_GtfsStaticParser_TransfersExceptions) GetStopId_2() string {
	if x != nil {
		return x.StopId_2
	}
	return ""
}

func (x *FeedConfig_GtfsStaticParser_TransfersExceptions) GetStrategy() FeedConfig_GtfsStaticParser_TransfersStrategy {
	if x != nil {
		return x.Strategy
	}
	return FeedConfig_GtfsStaticParser_DEFAULT
}

type ServiceMapConfig_Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartsEarlierThan *int64   `protobuf:"varint,1,opt,name=starts_earlier_than,json=startsEarlierThan,proto3,oneof" json:"starts_earlier_than,omitempty"`
	StartsLaterThan   *int64   `protobuf:"varint,2,opt,name=starts_later_than,json=startsLaterThan,proto3,oneof" json:"starts_later_than,omitempty"`
	EndsEarlierThan   *int64   `protobuf:"varint,3,opt,name=ends_earlier_than,json=endsEarlierThan,proto3,oneof" json:"ends_earlier_than,omitempty"`
	EndsLaterThan     *int64   `protobuf:"varint,4,opt,name=ends_later_than,json=endsLaterThan,proto3,oneof" json:"ends_later_than,omitempty"`
	Days              []string `protobuf:"bytes,5,rep,name=days,proto3" json:"days,omitempty"`
}

func (x *ServiceMapConfig_Static) Reset() {
	*x = ServiceMapConfig_Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMapConfig_Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapConfig_Static) ProtoMessage() {}

func (x *ServiceMapConfig_Static) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapConfig_Static.ProtoReflect.Descriptor instead.
func (*ServiceMapConfig_Static) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ServiceMapConfig_Static) GetStartsEarlierThan() int64 {
	if x != nil && x.StartsEarlierThan != nil {
		return *x.StartsEarlierThan
	}
	return 0
}

func (x *ServiceMapConfig_Static) GetStartsLaterThan() int64 {
	if x != nil && x.StartsLaterThan != nil {
		return *x.StartsLaterThan
	}
	return 0
}

func (x *ServiceMapConfig_Static) GetEndsEarlierThan() int64 {
	if x != nil && x.EndsEarlierThan != nil {
		return *x.EndsEarlierThan
	}
	return 0
}

func (x *ServiceMapConfig_Static) GetEndsLaterThan() int64 {
	if x != nil && x.EndsLaterThan != nil {
		return *x.EndsLaterThan
	}
	return 0
}

func (x *ServiceMapConfig_Static) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

type ServiceMapConfig_Realtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceMapConfig_Realtime) Reset() {
	*x = ServiceMapConfig_Realtime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMapConfig_Realtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapConfig_Realtime) ProtoMessage() {}

func (x *ServiceMapConfig_Realtime) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapConfig_Realtime.ProtoReflect.Descriptor instead.
func (*ServiceMapConfig_Realtime) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 1}
}

type GetSchedulerStatusReply_Feed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId             string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	FeedId               string `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Period               int64  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	LastSuccessfulUpdate int64  `protobuf:"varint,4,opt,name=last_successful_update,json=lastSuccessfulUpdate,proto3" json:"last_successful_update,omitempty"`
	LastFinishedUpdate   int64  `protobuf:"varint,5,opt,name=last_finished_update,json=lastFinishedUpdate,proto3" json:"last_finished_update,omitempty"`
	CurrentlyRunning     bool   `protobuf:"varint,6,opt,name=currently_running,json=currentlyRunning,proto3" json:"currently_running,omitempty"`
}

func (x *GetSchedulerStatusReply_Feed) Reset() {
	*x = GetSchedulerStatusReply_Feed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerStatusReply_Feed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusReply_Feed) ProtoMessage() {}

func (x *GetSchedulerStatusReply_Feed) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusReply_Feed.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusReply_Feed) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetSchedulerStatusReply_Feed) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *GetSchedulerStatusReply_Feed) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *GetSchedulerStatusReply_Feed) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *GetSchedulerStatusReply_Feed) GetLastSuccessfulUpdate() int64 {
	if x != nil {
		return x.LastSuccessfulUpdate
	}
	return 0
}

func (x *GetSchedulerStatusReply_Feed) GetLastFinishedUpdate() int64 {
	if x != nil {
		return x.LastFinishedUpdate
	}
	return 0
}

func (x *GetSchedulerStatusReply_Feed) GetCurrentlyRunning() bool {
	if x != nil {
		return x.CurrentlyRunning
	}
	return false
}

var File_api_admin_proto protoreflect.FileDescriptor

var file_api_admin_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x35, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0b, 0x79, 0x61,
	0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a,
	0x79, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x59, 0x61,
	0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x59, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x3f, 0x0a,
	0x11, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x7b, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x22, 0xcd, 0x09,
	0x0a, 0x0a, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x14, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x12,
	0x67, 0x74, 0x66, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x67, 0x74, 0x66, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x14, 0x67, 0x74,
	0x66, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x67, 0x74, 0x66, 0x73,
	0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x56,
	0x0a, 0x16, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x73,
	0x76, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x79, 0x63, 0x74,
	0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x43, 0x73, 0x76, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x13, 0x6e, 0x79, 0x63, 0x74, 0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x43, 0x73, 0x76,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa8, 0x03, 0x0a, 0x10, 0x47, 0x74, 0x66, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x63, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x99, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x32, 0x12,
	0x4a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47,
	0x74, 0x66, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x34, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x01, 0x1a, 0x5d, 0x0a, 0x12, 0x47, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x47, 0x74, 0x66,
	0x73, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x15, 0x0a, 0x13, 0x4e, 0x79, 0x63, 0x74, 0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x43, 0x73,
	0x76, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x91, 0x05,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x49, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0xb8, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65,
	0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f,
	0x65, 0x6e, 0x64, 0x73, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0d, 0x65,
	0x6e, 0x64, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x65,
	0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x1a, 0x0a, 0x0a, 0x08, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x49, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xba, 0x02, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x1a, 0xe9, 0x01,
	0x0a, 0x04, 0x46, 0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x59, 0x0a, 0x15, 0x47, 0x74, 0x66,
	0x73, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x5f, 0x4e, 0x59, 0x5f, 0x53, 0x55, 0x42,
	0x57, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x49, 0x50, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x53, 0x5f, 0x4e, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x57, 0x41, 0x59, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x53, 0x10, 0x02, 0x32, 0xf1, 0x04, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x1d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x66, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x12,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2f, 0x7b,
	0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x66, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x6c, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_admin_proto_rawDescOnce sync.Once
	file_api_admin_proto_rawDescData = file_api_admin_proto_rawDesc
)

func file_api_admin_proto_rawDescGZIP() []byte {
	file_api_admin_proto_rawDescOnce.Do(func() {
		file_api_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_admin_proto_rawDescData)
	})
	return file_api_admin_proto_rawDescData
}

var file_api_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_api_admin_proto_goTypes = []interface{}{
	(GtfsRealtimeExtension)(0),                              // 0: GtfsRealtimeExtension
	(FeedConfig_GtfsStaticParser_TransfersStrategy)(0),      // 1: FeedConfig.GtfsStaticParser.TransfersStrategy
	(*GetSystemConfigRequest)(nil),                          // 2: GetSystemConfigRequest
	(*InstallOrUpdateSystemRequest)(nil),                    // 3: InstallOrUpdateSystemRequest
	(*YamlConfig)(nil),                                      // 4: YamlConfig
	(*InstallOrUpdateSystemReply)(nil),                      // 5: InstallOrUpdateSystemReply
	(*DeleteSystemRequest)(nil),                             // 6: DeleteSystemRequest
	(*DeleteSystemReply)(nil),                               // 7: DeleteSystemReply
	(*SystemConfig)(nil),                                    // 8: SystemConfig
	(*FeedConfig)(nil),                                      // 9: FeedConfig
	(*ServiceMapConfig)(nil),                                // 10: ServiceMapConfig
	(*UpdateFeedRequest)(nil),                               // 11: UpdateFeedRequest
	(*UpdateFeedReply)(nil),                                 // 12: UpdateFeedReply
	(*GetSchedulerStatusRequest)(nil),                       // 13: GetSchedulerStatusRequest
	(*GetSchedulerStatusReply)(nil),                         // 14: GetSchedulerStatusReply
	(*ResetSchedulerRequest)(nil),                           // 15: ResetSchedulerRequest
	(*ResetSchedulerReply)(nil),                             // 16: ResetSchedulerReply
	nil,                                                     // 17: YamlConfig.TemplateArgsEntry
	nil,                                                     // 18: FeedConfig.HttpHeadersEntry
	(*FeedConfig_GtfsStaticParser)(nil),                     // 19: FeedConfig.GtfsStaticParser
	(*FeedConfig_GtfsRealtimeParser)(nil),                   // 20: FeedConfig.GtfsRealtimeParser
	(*FeedConfig_NyctSubwayCsvParser)(nil),                  // 21: FeedConfig.NyctSubwayCsvParser
	(*FeedConfig_GtfsStaticParser_TransfersExceptions)(nil), // 22: FeedConfig.GtfsStaticParser.TransfersExceptions
	(*ServiceMapConfig_Static)(nil),                         // 23: ServiceMapConfig.Static
	(*ServiceMapConfig_Realtime)(nil),                       // 24: ServiceMapConfig.Realtime
	(*GetSchedulerStatusReply_Feed)(nil),                    // 25: GetSchedulerStatusReply.Feed
}
var file_api_admin_proto_depIdxs = []int32{
	8,  // 0: InstallOrUpdateSystemRequest.system_config:type_name -> SystemConfig
	4,  // 1: InstallOrUpdateSystemRequest.yaml_config:type_name -> YamlConfig
	17, // 2: YamlConfig.template_args:type_name -> YamlConfig.TemplateArgsEntry
	8,  // 3: InstallOrUpdateSystemReply.system_config:type_name -> SystemConfig
	9,  // 4: SystemConfig.feeds:type_name -> FeedConfig
	10, // 5: SystemConfig.service_maps:type_name -> ServiceMapConfig
	18, // 6: FeedConfig.http_headers:type_name -> FeedConfig.HttpHeadersEntry
	19, // 7: FeedConfig.gtfs_static_parser:type_name -> FeedConfig.GtfsStaticParser
	20, // 8: FeedConfig.gtfs_realtime_parser:type_name -> FeedConfig.GtfsRealtimeParser
	21, // 9: FeedConfig.nyct_subway_csv_parser:type_name -> FeedConfig.NyctSubwayCsvParser
	23, // 10: ServiceMapConfig.static_source:type_name -> ServiceMapConfig.Static
	24, // 11: ServiceMapConfig.realtime_source:type_name -> ServiceMapConfig.Realtime
	25, // 12: GetSchedulerStatusReply.feeds:type_name -> GetSchedulerStatusReply.Feed
	1,  // 13: FeedConfig.GtfsStaticParser.transfers_strategy:type_name -> FeedConfig.GtfsStaticParser.TransfersStrategy
	22, // 14: FeedConfig.GtfsStaticParser.transfers_exceptions:type_name -> FeedConfig.GtfsStaticParser.TransfersExceptions
	0,  // 15: FeedConfig.GtfsRealtimeParser.extension:type_name -> GtfsRealtimeExtension
	1,  // 16: FeedConfig.GtfsStaticParser.TransfersExceptions.strategy:type_name -> FeedConfig.GtfsStaticParser.TransfersStrategy
	2,  // 17: TransiterAdmin.GetSystemConfig:input_type -> GetSystemConfigRequest
	3,  // 18: TransiterAdmin.InstallOrUpdateSystem:input_type -> InstallOrUpdateSystemRequest
	6,  // 19: TransiterAdmin.DeleteSystem:input_type -> DeleteSystemRequest
	11, // 20: TransiterAdmin.UpdateFeed:input_type -> UpdateFeedRequest
	13, // 21: TransiterAdmin.GetSchedulerStatus:input_type -> GetSchedulerStatusRequest
	15, // 22: TransiterAdmin.ResetScheduler:input_type -> ResetSchedulerRequest
	8,  // 23: TransiterAdmin.GetSystemConfig:output_type -> SystemConfig
	5,  // 24: TransiterAdmin.InstallOrUpdateSystem:output_type -> InstallOrUpdateSystemReply
	7,  // 25: TransiterAdmin.DeleteSystem:output_type -> DeleteSystemReply
	12, // 26: TransiterAdmin.UpdateFeed:output_type -> UpdateFeedReply
	14, // 27: TransiterAdmin.GetSchedulerStatus:output_type -> GetSchedulerStatusReply
	16, // 28: TransiterAdmin.ResetScheduler:output_type -> ResetSchedulerReply
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_api_admin_proto_init() }
func file_api_admin_proto_init() {
	if File_api_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOrUpdateSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOrUpdateSystemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSystemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSchedulerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSchedulerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedConfig_GtfsStaticParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedConfig_GtfsRealtimeParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedConfig_NyctSubwayCsvParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedConfig_GtfsStaticParser_TransfersExceptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMapConfig_Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMapConfig_Realtime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerStatusReply_Feed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_admin_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*InstallOrUpdateSystemRequest_SystemConfig)(nil),
		(*InstallOrUpdateSystemRequest_YamlConfig)(nil),
	}
	file_api_admin_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*YamlConfig_Url)(nil),
		(*YamlConfig_Content)(nil),
	}
	file_api_admin_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*FeedConfig_GtfsStaticParser_)(nil),
		(*FeedConfig_GtfsRealtimeParser_)(nil),
		(*FeedConfig_NyctSubwayCsvParser_)(nil),
	}
	file_api_admin_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ServiceMapConfig_StaticSource)(nil),
		(*ServiceMapConfig_RealtimeSource)(nil),
	}
	file_api_admin_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_api_admin_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_admin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_admin_proto_goTypes,
		DependencyIndexes: file_api_admin_proto_depIdxs,
		EnumInfos:         file_api_admin_proto_enumTypes,
		MessageInfos:      file_api_admin_proto_msgTypes,
	}.Build()
	File_api_admin_proto = out.File
	file_api_admin_proto_rawDesc = nil
	file_api_admin_proto_goTypes = nil
	file_api_admin_proto_depIdxs = nil
}
